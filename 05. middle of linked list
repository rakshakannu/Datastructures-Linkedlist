// if there are two middle nodes, print the second node out of the two.

// naive solution
// this solution requires two traversals of linked list

void printmiddle( node head)
{
  if(head==null)  
    return;
  int count=0;
  node curr; // like i in for loop
  for( curr=head; curr<count/2; curr=curr.next)
    count++;
  curr = head;
  for(int i=0;i<count/2;i++)
    curr=curr.next;
  System.out.println(curr.data);
}

// efficient solution
// one traversal only
// based on slow or fast references(java)
// slow moves one node at a time
// fast moves two nodes at a time

void printiddle(node head)
{
  if(head==null)
    return;
  node slow=head, fast = head;
  while(fast!=null && fast.next!=null)
  {
    slow=slow.next; // crossing one node at a time
    fast = fast.next.next; // crossing two nodes at a time
  }
  System.out.print(slow.data);
}
