// IMPORTANT INTERVIEW QUESTION

// a singly linked list, even value nodes should appear first then odd value nodes. and the relative order of the even odd value nodes
should be same.

// corner case - only odd/even value nodes present in the linked list

// naive solution
// keep removing odd nodes from original position and keep adding it at the end
// requires two traverals

// better solution
// one traversal
// by connecting even and odd nodes together

node segregate(node head)
{
  node eS=null; even start
  node Ee=null; even end
  node Os=null; odd start
  node Oe=null; odd end
  
  for( node curr=head; curr!=null;curr=curr.next)
  {
    int x = curr.data;
    if(x%2==0)
    {
      if(eS=null)
      {
        eS=curr;
        eE=eS;
      }
      else
      {
        eE.next=curr;
        eE=curr.next;
      }
    }
    else
    {
      if(oS=null)
      {
        oS=curr;
        oE=oS;
      }
      else
      {
        oE.next=curr;
        oE=oE.next;
      }
    }
  }
  
  // after the for loop
  if(oS==null|| eS==null)
    return;
  
  eE.next=oS;
  oE.next=null;
  return eS;
}
